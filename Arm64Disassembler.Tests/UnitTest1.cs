using Xunit.Abstractions;

namespace Arm64Disassembler.Tests;

public class UnitTest1
{
    private readonly ITestOutputHelper _testOutputHelper;

    //Example Arm64 code for a basic assembly-level custom attribute generator
    /* Should disassemble to
         stp x20, x19, [sp, #-0x20]!
         stp x29, x30, [sp, #0x10]
         add x29, sp, #0x10
         mov x19, x0
         ldr x8, [x19, #8]
         mov x2, xzr
         movz w1, #0x102
         ldr x0, [x8]
         bl #0x13fc400
         ldr x8, [x19, #8]
         mov x1, xzr
         ldr x19, [x8, #8]
         mov x0, x19
         bl #0xf3d6cc
         ldp x29, x30, [sp, #0x10]
         mov x2, xzr
         orr w1, wzr, #1
         mov x0, x19
         ldp x20, x19, [sp], #0x20
         b #0xf3d6d4
    */
    private static byte[] caGenBody =
    {
        0xF4, 0x4F, 0xBE, 0xA9, 0xFD, 0x7B, 0x01, 0xA9, 0xFD, 0x43, 0x00, 0x91, 0xF3, 0x03, 0x00, 0xAA,
        0x68, 0x06, 0x40, 0xF9, 0xE2, 0x03, 0x1F, 0xAA, 0x41, 0x20, 0x80, 0x52, 0x00, 0x01, 0x40, 0xF9,
        0xF8, 0xF0, 0x4F, 0x94, 0x68, 0x06, 0x40, 0xF9, 0xE1, 0x03, 0x1F, 0xAA, 0x13, 0x05, 0x40, 0xF9,
        0xE0, 0x03, 0x13, 0xAA, 0xA6, 0xF5, 0x3C, 0x94, 0xFD, 0x7B, 0x41, 0xA9, 0xE2, 0x03, 0x1F, 0xAA,
        0xE1, 0x03, 0x00, 0x32, 0xE0, 0x03, 0x13, 0xAA, 0xF4, 0x4F, 0xC2, 0xA8, 0xA2, 0xF5, 0x3C, 0x14
    };

    /*
        stp x24, x23, [sp, #-0x40]!
        stp x22, x21, [sp, #0x10]
        stp x20, x19, [sp, #0x20]
        stp x29, x30, [sp, #0x30]
        add x29, sp, #0x30
        sub sp, sp, #0x10
        adrp x21, #0x29d9000
        ldrb w8, [x21, #0x3da]
        mov x19, x1
        mov x20, x0
        tbnz w8, #0, #0x44
        adrp x8, #0x2822000
        ldr x8, [x8, #0x1c0]
        ldr w0, [x8]
        bl #0x18df5a0
        orr w8, wzr, #1
        strb w8, [x21, #0x3da]
        str xzr, [sp, #8]
        cbnz x20, #0x50
        bl #0x1909308
        mov x1, xzr
        mov x0, x20
        bl #0xe2c8b8
        cmp w0, #2
        b.ge #0x108
        cbnz x20, #0x6c
        bl #0x1909308
        mov x1, xzr
        mov x0, x20
        bl #0xe2c84c
        mov w21, w0
        cmp w21, #1
        b.lt #0xd8
        mov w22, wzr
        add x23, x20, #0x20
        cbnz x20, #0x94
        bl #0x1909308
        ldr x8, [x20]
        add x0, sp, #8
        ldr w2, [x8, #0xd8]
        mul w8, w2, w22
        add x1, x23, w8, uxtw
        bl #0xffffffffffb0092c
        ldr x1, [sp, #8]
        cbz x19, #0xe0
        ldr x8, [x19]
        mov x0, x19
        ldp x9, x2, [x8, #0x110]
        blr x9
        and w8, w0, #1
        tbnz w8, #0, #0xec
        add w22, w22, #1
        cmp w22, w21
        b.lt #0x8c
        mov w0, wzr
        b #0xf0
        cmp x1, #0
        cset w0, eq
        b #0xf0
        orr w0, wzr, #1
        sub sp, x29, #0x30
        ldp x29, x30, [sp, #0x30]
        ldp x20, x19, [sp, #0x20]
        ldp x22, x21, [sp, #0x10]
        ldp x24, x23, [sp], #0x40
        ret 
        adrp x8, #0x27fc000
        ldr x8, [x8, #0xc48]
        mov x0, xzr
        mov x2, xzr
        ldr x1, [x8]
        bl #0x10a31dc
        adrp x8, #0x281d000
        ldr x8, [x8, #0x420]
        mov x19, x0
        ldr x8, [x8]
        mov x0, x8
        bl #0x191734c
        mov x2, xzr
        mov x1, x19
        mov x20, x0
        bl #0xc6d810
        adrp x8, #0x27fa000
        ldr x8, [x8, #0xc50]
        mov x0, x20
        ldr x1, [x8]
        bl #0x19091ec
        bl #0xffffffffffffafd4
     */
    private static byte[] IncludesPcRelAddressing =
    {
        0xF8, 0x5F, 0xBC, 0xA9, 0xF6, 0x57, 0x01, 0xA9, 0xF4, 0x4F, 0x02, 0xA9, 0xFD, 0x7B, 0x03, 0xA9,
        0xFD, 0xC3, 0x00, 0x91, 0xFF, 0x43, 0x00, 0xD1, 0xD5, 0x4E, 0x01, 0xB0, 0xA8, 0x6A, 0x4F, 0x39,
        0xF3, 0x03, 0x01, 0xAA, 0xF4, 0x03, 0x00, 0xAA, 0xE8, 0x00, 0x00, 0x37, 0x08, 0x41, 0x01, 0xD0,
        0x08, 0xE1, 0x40, 0xF9, 0x00, 0x01, 0x40, 0xB9, 0x5A, 0x7D, 0x63, 0x94, 0xE8, 0x03, 0x00, 0x32,
        0xA8, 0x6A, 0x0F, 0x39, 0xFF, 0x07, 0x00, 0xF9, 0x54, 0x00, 0x00, 0xB5, 0xAF, 0x24, 0x64, 0x94,
        0xE1, 0x03, 0x1F, 0xAA, 0xE0, 0x03, 0x14, 0xAA, 0x18, 0xB2, 0x38, 0x94, 0x1F, 0x08, 0x00, 0x71,
        0x4A, 0x05, 0x00, 0x54, 0x54, 0x00, 0x00, 0xB5, 0xA8, 0x24, 0x64, 0x94, 0xE1, 0x03, 0x1F, 0xAA,
        0xE0, 0x03, 0x14, 0xAA, 0xF6, 0xB1, 0x38, 0x94, 0xF5, 0x03, 0x00, 0x2A, 0xBF, 0x06, 0x00, 0x71,
        0xCB, 0x02, 0x00, 0x54, 0xF6, 0x03, 0x1F, 0x2A, 0x97, 0x82, 0x00, 0x91, 0x54, 0x00, 0x00, 0xB5,
        0x9E, 0x24, 0x64, 0x94, 0x88, 0x02, 0x40, 0xF9, 0xE0, 0x23, 0x00, 0x91, 0x02, 0xD9, 0x40, 0xB9,
        0x48, 0x7C, 0x16, 0x1B, 0xE1, 0x42, 0x28, 0x8B, 0x21, 0x02, 0xEC, 0x97, 0xE1, 0x07, 0x40, 0xF9,
        0x93, 0x01, 0x00, 0xB4, 0x68, 0x02, 0x40, 0xF9, 0xE0, 0x03, 0x13, 0xAA, 0x09, 0x09, 0x51, 0xA9, 
        0x20, 0x01, 0x3F, 0xD6, 0x08, 0x00, 0x00, 0x12, 0x28, 0x01, 0x00, 0x37, 0xD6, 0x06, 0x00, 0x11, 
        0xDF, 0x02, 0x15, 0x6B, 0xCB, 0xFD, 0xFF, 0x54, 0xE0, 0x03, 0x1F, 0x2A, 0x05, 0x00, 0x00, 0x14, 
        0x3F, 0x00, 0x00, 0xF1, 0xE0, 0x17, 0x9F, 0x1A, 0x02, 0x00, 0x00, 0x14, 0xE0, 0x03, 0x00, 0x32, 
        0xBF, 0xC3, 0x00, 0xD1, 0xFD, 0x7B, 0x43, 0xA9, 0xF4, 0x4F, 0x42, 0xA9, 0xF6, 0x57, 0x41, 0xA9, 
        0xF8, 0x5F, 0xC4, 0xA8, 0xC0, 0x03, 0x5F, 0xD6, 0xE8, 0x3F, 0x01, 0x90, 0x08, 0x25, 0x46, 0xF9, 
        0xE0, 0x03, 0x1F, 0xAA, 0xE2, 0x03, 0x1F, 0xAA, 0x01, 0x01, 0x40, 0xF9, 0x30, 0x8C, 0x42, 0x94, 
        0xE8, 0x40, 0x01, 0xB0, 0x08, 0x11, 0x42, 0xF9, 0xF3, 0x03, 0x00, 0xAA, 0x08, 0x01, 0x40, 0xF9, 
        0xE0, 0x03, 0x08, 0xAA, 0x86, 0x5C, 0x64, 0x94, 0xE2, 0x03, 0x1F, 0xAA, 0xE1, 0x03, 0x13, 0xAA, 
        0xF4, 0x03, 0x00, 0xAA, 0xB3, 0xB5, 0x31, 0x94, 0xC8, 0x3F, 0x01, 0xD0, 0x08, 0x29, 0x46, 0xF9,
        0xE0, 0x03, 0x14, 0xAA, 0x01, 0x01, 0x40, 0xF9, 0x25, 0x24, 0x64, 0x94, 0x9E, 0xEB, 0xFF, 0x97
    };

    public UnitTest1(ITestOutputHelper testOutputHelper)
    {
        _testOutputHelper = testOutputHelper;
    }

    [Fact]
    public void TestDisassembleEntireBody()
    {
        var result = Disassembler.DisassembleOnDemand(IncludesPcRelAddressing, 0);

        foreach (var instruction in result)
        {
            _testOutputHelper.WriteLine(instruction.ToString());
        }
    }

    [Fact]
    public void LongTestForProfile()
    {
        var body = Enumerable.Repeat(caGenBody, 1000000).SelectMany(b => b).ToArray();

        var result = Disassembler.Disassemble(body, 0);
        
        Assert.Equal(body.Length / 4, result.Instructions.Count);
    }
}